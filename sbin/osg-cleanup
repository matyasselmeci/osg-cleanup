#!/usr/bin/env perl

=head1 NAME 

osg-cleanup-dirs - Cleanup old files from the OSG installation and user
                   directories.

=head1 SYNOPSIS

    osg-cleanup [options] 
                --dry-run
                --help

=head1 DESCRIPTION

Write a description and put it here.

=head1 OPTIONS

=over 4

=item B<--dry-run>

Print what will be done, but do not actually do any work.

=item B<--help> 

Show brief explanatory text for using osg-cleanup

=back

=cut

use strict;
use warnings;
use FileHandle;
use Getopt::Long;
use File::Basename;

my $OPT_DRY_RUN = 0;
my $AGE_IN_DAYS = 14;
my $USERS;

GetOptions("dry-run"    => \$OPT_DRY_RUN,
           "help|usage" => \&usage);

my $time = time();
my $CONFIG_FILE = "/etc/osg/osg-cleanup.conf";
my $LOG_FILE    = "/var/log/osg/osg-cleanup.log";
my $SCRIPT_DIR  = "/usr/libexec/osg-cleanup";
my $LOCK_FILE   = "/var/lock/osg-cleanup.lock";
my $USER_FILE   = "/tmp/osg-cleanup.users.$time.$$";

open_log();

load_config_file($CONFIG_FILE);
make_user_file($USER_FILE, $USERS);
create_lock($LOCK_FILE);
find_and_run_scripts($SCRIPT_DIR);
remove_lock($LOCK_FILE);
unlink($USER_FILE);


sub load_config_file {
    my ($conf_file) = @_;

    out("Loading config file '$conf_file'");

    my @config = slurp($conf_file);

    foreach (@config) {
        if(/users\s*=\s*(.+)$/i) {
            $USERS = $1;
            out("Users: '$USERS'");
        }
        elsif(/age\s*=\s*(\d+)/i) {
            $AGE_IN_DAYS = $1;
            out("Age: '$AGE_IN_DAYS'");
        }
    }
}

sub make_user_file {
    my ($file, $users) = @_;

    out("Generating user file for users: $users");
    out("User file location: $file");

    my @users;
    if($users eq '@vo-file') {
        @users = read_vo_file();
    }
    else {
        @users = split(' ', $users);
    }

    my %users;
    for my $user (@users) {
        my $home_dir = (getpwnam($user))[7];
        if(not defined($home_dir)) {
            out("User or home directory does not exist: '$user'");
        }
        elsif(!-e $home_dir) {
            out("User '$user': Home directory does not exist ($home_dir)");
        }
        else {
            $users{$user} = $home_dir;
        }
    }

    # First "touch" the users file and set its permissions to lock it down
    open(USERS, '>', $file) or log_and_die("Cannot open $file for writing: $!");
    close(USERS);
    chmod 0700, $file;

    open(USERS, '>', $file) or log_and_die("Cannot open $file for writing: $!");
    foreach my $user (keys %users) {
        print USERS "$user $users{$user}\n";
    }
    close(USERS);

    # Set this in the environment so children can find it
    $ENV{OSG_CLEANUP_USER_FILE} = $file;
}

sub read_vo_file {
    my $file = "/var/lib/osg/user-vo-map";

    if(!-e $file) {
        log_and_die("The VO mapfile does not exist at '$file'.  Cannot continue.");
    }

    my @users;
    my @lines = slurp($file);
    
    foreach (@lines) {
        next if(/^\s*$/);
        next if(/^\s*#/);
        
        if(/^\s*(\S+)\s+\S+\s*$/) {
            push @users, $1;
        }
    }

    return @users;
}

sub find_and_run_scripts {
    my ($script_dir) = @_;

    # For security purposes we need to change to the directory containing the 
    # scripts.  This is so that after we evaluate the directory, Bad Guy can't
    # replace the directory out from under us (in case Bad Guy has write access
    # to a parent directort of SCRIPT_DIR)
    out("Changing CWD to '$script_dir'");
    if(!chdir($script_dir)) {
        log_and_die("Could not chdir into $script_dir: $!");
    }
    check_perms_and_owner(".");
    for my $script (glob("./*")) {
        run_script($script);
        sleep(1); # This is in place to help sysadmins Ctrl-C out of the script
    }
}

sub run_script {
    my ($script) = @_;

    out("Going to execute script '$script'");

    check_perms_and_owner($script);

    $ENV{OSG_CLEANUP_AGE} = $AGE_IN_DAYS;

    if($OPT_DRY_RUN) {
        out("\tNot executing $script because --dry-run is supplied.");
        return;
    }
    
    # I set the nice level to add 39 so that in case the priority is negative it
    # will still get bumped all the way up to 19.
    my $command = "/bin/nice -n 39 $script >>$LOG_FILE 2>&1";
    out("Executing command: '$command'");
    close_log();
    my $ret = system($command);
    open_log();
    out("Exit code: $ret");
}


sub check_perms_and_owner {
    my ($file) = @_;

    my @stat = stat($file);
    my $mode = sprintf "%04o", $stat[2] & 07777;
    my $uid = $stat[4];
    my $gid = $stat[5];

    if($uid != 0 or $gid != 0) {
        log_and_die("\tThe owner and group on the file MUST be root ($file)");
    }

    if($mode ne "0700") {
        log_and_die("\tThe mode on the file MUST be 0700 ($file)");
    }
}

sub usage {
    print "$0 [options]\n";
    print "--dry-run\n";
    print "--help\n\n";
    exit 1;
}

sub create_lock {
    my ($lock_file) = @_;

    if(-r $lock_file) {
        my ($pid) = slurp($lock_file) =~ /(\d+)/;
        if(defined($pid) && $pid > 0) {
            my $process_info = `ps -f -ww -p $pid`;

            if($process_info =~ /osg-cleanup/) {
                log_msg("A previous osg-cleanup process was found running.  Sending it a kill signal");
                log_msg("ps output:\n$process_info");

                # Kill the process and clean up temp directories
                kill 9, $pid;
            }
        }
    }
    unlink($lock_file) if(-e $lock_file);

    if(open(PID, '>', $lock_file)) {
        print PID "$$\n";
        close(PID);
    }
    else {  # If we can't open the pid file, there's not much to do except issue a warning
        log_and_die("Can't open lock file '$lock_file': $!");
    }
}

sub remove_lock {
    my ($lock_file) = @_;

    unlink($lock_file) if(-e $lock_file);
}

# When running in cron we want to make sure that error message make it into the
# log file since the output of dir will probably go into a mail that nobody reads.
sub log_and_die {
    my ($msg) = @_;
    out($msg);

    unlink($USER_FILE) if(-e $USER_FILE);

    die($msg);
}

sub out {
    my ($msg) = @_;

    if($OPT_DRY_RUN) {
        print "$msg\n";
    }
    else {
        to_log($msg);
    }
}

sub open_log {
    open(LOG, '>>', $LOG_FILE) or warn("Cannot open log file for writing '$LOG_FILE': $!");
}

sub to_log {
    my ($msg) = @_;
    print LOG "$msg\n";
}

sub close_log {
    close(LOG);
}

sub slurp {
    my ($file) = @_;

    if (not -e $file) {
	return undef;
    }

    my $fh = new FileHandle $file;
    if (not defined $fh) {
	return undef;
    }

    my @contents = <$fh>;
    my $contents_as_string = join('', @contents);
    return wantarray ? @contents : $contents_as_string;
}
