#!/usr/bin/env perl

use strict;
use warnings;

my $CONFIG_FILE = "/etc/globus/globus-gram-job-manager.conf";

# The directories we want to clean are configurable.  We will parse the 
# configuration file to find them.
my %dirs = parse_config_file();

# The only directory that we *must* clean in this script is the state dir.
# If we need to add more directories in the future put them here.
if (not $dirs{'state-file-dir'}) {
    $dirs{'state-file-dir'} = "/var/lib/globus/gram_job_state";
}

# Go through and clean directories
my $have_tmpwatch = ! system("which tmpwatch > /dev/null 2>&1");
foreach my $dir (values %dirs) {
    print "Cleaning directory '$dir'\n";

    # In general we want to do a recursive cleanup on these directories.
    # However, we don't want to recurse through the Globus state file dir,
    # per JIRA ticket SOFTWARE-560
    if ($dir eq $dirs{'state-file-dir'}) { 
        clean_gram_state_file_dir($dir); 
    }
    else { 
        if ($have_tmpwatch) {
            my $age = 24 * $ENV{OSG_CLEANUP_AGE}; # el5 tmpwatch wants time in hours
            system("tmpwatch --atime $age $dir");
        }
        else {
            system("find $dir -xdev -atime +$ENV{OSG_CLEANUP_AGE} -exec rm -f {} \\;");
        }
    } 
}

sub unlink_loud {
    my $file = shift;
    print "Removing '$file': ";
    if (! unlink $file) {
        print "ERROR: $!\n";
    }
    else {
        print "OK\n";
    }
}

sub clean_file {
    my $file = shift;
    if (exists($ENV{OSG_CLEANUP_AGE}) && -A $file > $ENV{OSG_CLEANUP_AGE}) {
        unlink_loud($file);
    }
}

sub clean_gram_state_file_dir {
    my ($state_file_dir) = @_;

    # Want to clean up the following patterns in $state_file_dir:
    #   $state_file_dir/* (files only) (backward compatibility)
    #   $state_file_dir/USERNAME/DN_HASH/JOBMANAGER/* (files only) (new, see #SOFTWARE-785)
    # Must be careful not to clean out the following: (see #SOFTWARE-560)
    #   $state_file_dir/HOSTNAME/JOBMANAGER.DN_HASH.{lock,cred,sock,pid}

    # Generalization I'm using for robustness:
    #   Clean files matching $state_file_dir/*
    #   Clean files matching $state_file_dir/SUBDIR1/SUBDIR2/SUBDIR3/*
    #   Ignore all else

    unless (-d $state_file_dir) {
        warn "gram state file dir ($state_file_dir) is not a directory!"; return;
    }

    # Do not cross device boundaries.
    my $topdev = (stat($state_file_dir))[0];

    my @matching_files_toplevel = grep { -f $_ } glob("$state_file_dir/*");
    my @matching_files_deep = grep { -f $_ } glob("$state_file_dir/*/*/*/*");
    foreach my $matching_file (@matching_files_toplevel, @matching_files_deep) {
        next if (stat($matching_file))[0] != $topdev;
        clean_file($matching_file);
    }
}


sub parse_config_file {
    open(IN, '<', $CONFIG_FILE) or die("Cannot read $CONFIG_FILE: $!");
    my @contents = <IN>;
    close(IN);

    my %dirs;
    foreach my $line (@contents) {
        if ($line =~ /^\s*-state-file-dir\s+(\S+)/) {
            $dirs{'state-file-dir'} = $1;
        }
        elsif ($line =~ /^\s*-cache-location\s+(\S+)/) {
            $dirs{'cache-location'} = $1;
        }
        elsif ($line =~ /^\s*-globus-job-dir\s+(\S+)/) {
            $dirs{'globus-job-dir'} = $1;
        }
        elsif ($line =~ /^\s*-scratch-base-dir\s+(\S+)/) {
            $dirs{'scratch-base-dir'} = $1;
        }
    }

    return %dirs;
}
